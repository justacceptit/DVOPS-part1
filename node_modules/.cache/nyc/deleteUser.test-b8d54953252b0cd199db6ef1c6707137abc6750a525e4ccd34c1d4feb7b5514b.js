function cov_1rqe9b2qdi(){var path="C:\\Users\\user\\OneDrive - Temasek Polytechnic\\Desktop\\devops\\DVOPS-part1\\tests\\deleteUser.test.js";var hash="ea3f3c5d55b9f19f5d173bfbba7330ffe18fcdd9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\user\\OneDrive - Temasek Polytechnic\\Desktop\\devops\\DVOPS-part1\\tests\\deleteUser.test.js",statementMap:{"0":{start:{line:1,column:11},end:{line:1,column:33}},"1":{start:{line:2,column:32},end:{line:2,column:60}},"2":{start:{line:3,column:15},end:{line:3,column:32}},"3":{start:{line:4,column:13},end:{line:4,column:28}},"4":{start:{line:5,column:15},end:{line:5,column:26}},"5":{start:{line:7,column:0},end:{line:146,column:3}},"6":{start:{line:9,column:28},end:{line:9,column:51}},"7":{start:{line:11,column:2},end:{line:15,column:5}},"8":{start:{line:13,column:22},end:{line:13,column:67}},"9":{start:{line:14,column:4},end:{line:14,column:61}},"10":{start:{line:17,column:2},end:{line:23,column:5}},"11":{start:{line:19,column:26},end:{line:19,column:70}},"12":{start:{line:20,column:4},end:{line:20,column:66}},"13":{start:{line:22,column:4},end:{line:22,column:39}},"14":{start:{line:27,column:2},end:{line:51,column:5}},"15":{start:{line:28,column:23},end:{line:28,column:28}},"16":{start:{line:31,column:16},end:{line:33,column:5}},"17":{start:{line:34,column:16},end:{line:42,column:5}},"18":{start:{line:36,column:8},end:{line:36,column:31}},"19":{start:{line:37,column:8},end:{line:37,column:20}},"20":{start:{line:40,column:8},end:{line:40,column:33}},"21":{start:{line:45,column:4},end:{line:45,column:31}},"22":{start:{line:49,column:4},end:{line:49,column:41}},"23":{start:{line:50,column:4},end:{line:50,column:76}},"24":{start:{line:53,column:2},end:{line:77,column:5}},"25":{start:{line:54,column:30},end:{line:54,column:36}},"26":{start:{line:57,column:16},end:{line:59,column:5}},"27":{start:{line:60,column:16},end:{line:68,column:5}},"28":{start:{line:62,column:8},end:{line:62,column:31}},"29":{start:{line:63,column:8},end:{line:63,column:20}},"30":{start:{line:66,column:8},end:{line:66,column:33}},"31":{start:{line:71,column:4},end:{line:71,column:31}},"32":{start:{line:74,column:4},end:{line:74,column:32}},"33":{start:{line:76,column:4},end:{line:76,column:56}},"34":{start:{line:79,column:2},end:{line:111,column:5}},"35":{start:{line:80,column:30},end:{line:80,column:43}},"36":{start:{line:83,column:32},end:{line:83,column:66}},"37":{start:{line:86,column:16},end:{line:88,column:5}},"38":{start:{line:89,column:16},end:{line:97,column:5}},"39":{start:{line:91,column:8},end:{line:91,column:31}},"40":{start:{line:92,column:8},end:{line:92,column:20}},"41":{start:{line:95,column:8},end:{line:95,column:33}},"42":{start:{line:100,column:4},end:{line:100,column:31}},"43":{start:{line:103,column:4},end:{line:103,column:41}},"44":{start:{line:105,column:4},end:{line:105,column:65}},"45":{start:{line:107,column:31},end:{line:107,column:65}},"46":{start:{line:110,column:4},end:{line:110,column:66}},"47":{start:{line:116,column:2},end:{line:140,column:5}},"48":{start:{line:117,column:23},end:{line:117,column:28}},"49":{start:{line:120,column:16},end:{line:122,column:5}},"50":{start:{line:123,column:16},end:{line:131,column:5}},"51":{start:{line:125,column:8},end:{line:125,column:31}},"52":{start:{line:126,column:8},end:{line:126,column:20}},"53":{start:{line:129,column:8},end:{line:129,column:33}},"54":{start:{line:134,column:4},end:{line:134,column:31}},"55":{start:{line:138,column:4},end:{line:138,column:41}},"56":{start:{line:139,column:4},end:{line:139,column:91}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:41},end:{line:7,column:42}},loc:{start:{line:7,column:53},end:{line:146,column:1}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:11,column:9},end:{line:11,column:10}},loc:{start:{line:11,column:27},end:{line:15,column:3}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:17,column:8},end:{line:17,column:9}},loc:{start:{line:17,column:26},end:{line:23,column:3}},line:17},"3":{name:"(anonymous_3)",decl:{start:{line:27,column:42},end:{line:27,column:43}},loc:{start:{line:27,column:60},end:{line:51,column:3}},line:27},"4":{name:"(anonymous_4)",decl:{start:{line:35,column:14},end:{line:35,column:15}},loc:{start:{line:35,column:30},end:{line:38,column:7}},line:35},"5":{name:"(anonymous_5)",decl:{start:{line:39,column:12},end:{line:39,column:13}},loc:{start:{line:39,column:28},end:{line:41,column:7}},line:39},"6":{name:"(anonymous_6)",decl:{start:{line:53,column:69},end:{line:53,column:70}},loc:{start:{line:53,column:87},end:{line:77,column:3}},line:53},"7":{name:"(anonymous_7)",decl:{start:{line:61,column:14},end:{line:61,column:15}},loc:{start:{line:61,column:30},end:{line:64,column:7}},line:61},"8":{name:"(anonymous_8)",decl:{start:{line:65,column:12},end:{line:65,column:13}},loc:{start:{line:65,column:28},end:{line:67,column:7}},line:65},"9":{name:"(anonymous_9)",decl:{start:{line:79,column:79},end:{line:79,column:80}},loc:{start:{line:79,column:97},end:{line:111,column:3}},line:79},"10":{name:"(anonymous_10)",decl:{start:{line:90,column:14},end:{line:90,column:15}},loc:{start:{line:90,column:30},end:{line:93,column:7}},line:90},"11":{name:"(anonymous_11)",decl:{start:{line:94,column:12},end:{line:94,column:13}},loc:{start:{line:94,column:28},end:{line:96,column:7}},line:94},"12":{name:"(anonymous_12)",decl:{start:{line:116,column:102},end:{line:116,column:103}},loc:{start:{line:116,column:120},end:{line:140,column:3}},line:116},"13":{name:"(anonymous_13)",decl:{start:{line:124,column:14},end:{line:124,column:15}},loc:{start:{line:124,column:30},end:{line:127,column:7}},line:124},"14":{name:"(anonymous_14)",decl:{start:{line:128,column:12},end:{line:128,column:13}},loc:{start:{line:128,column:28},end:{line:130,column:7}},line:128}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ea3f3c5d55b9f19f5d173bfbba7330ffe18fcdd9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1rqe9b2qdi=function(){return actualCoverage;};}return actualCoverage;}cov_1rqe9b2qdi();const fs=(cov_1rqe9b2qdi().s[0]++,require('fs').promises);const{deleteUser,readJSON}=(cov_1rqe9b2qdi().s[1]++,require('../utils/UserUtil'));// Adjust the path as needed
const assert=(cov_1rqe9b2qdi().s[2]++,require('assert'));const chai=(cov_1rqe9b2qdi().s[3]++,require('chai'));const expect=(cov_1rqe9b2qdi().s[4]++,chai.expect);cov_1rqe9b2qdi().s[5]++;describe('Testing Delete User function',function(){cov_1rqe9b2qdi().f[0]++;// Create a temporary copy of the users.json file for testing
const testUsersFilePath=(cov_1rqe9b2qdi().s[6]++,'utils/test-users.json');cov_1rqe9b2qdi().s[7]++;before(async function(){cov_1rqe9b2qdi().f[1]++;// Copy the contents of users.json to test-users.json for testing
const usersData=(cov_1rqe9b2qdi().s[8]++,await fs.readFile('utils/users.json','utf8'));cov_1rqe9b2qdi().s[9]++;await fs.writeFile(testUsersFilePath,usersData,'utf8');});cov_1rqe9b2qdi().s[10]++;after(async function(){cov_1rqe9b2qdi().f[2]++;// Clean up: restore the original users.json file
const testUsersData=(cov_1rqe9b2qdi().s[11]++,await fs.readFile(testUsersFilePath,'utf8'));cov_1rqe9b2qdi().s[12]++;await fs.writeFile('utils/users.json',testUsersData,'utf8');// Delete the temporary test-users.json file
cov_1rqe9b2qdi().s[13]++;await fs.unlink(testUsersFilePath);});cov_1rqe9b2qdi().s[14]++;it('should successfully delete a user',async function(){cov_1rqe9b2qdi().f[3]++;const testUserId=(cov_1rqe9b2qdi().s[15]++,'303');// Replace with an actual user ID for your test
// Mock the request and response objects
const req=(cov_1rqe9b2qdi().s[16]++,{params:{id:testUserId}});const res=(cov_1rqe9b2qdi().s[17]++,{status:function(code){cov_1rqe9b2qdi().f[4]++;cov_1rqe9b2qdi().s[18]++;this.statusCode=code;cov_1rqe9b2qdi().s[19]++;return this;},json:function(data){cov_1rqe9b2qdi().f[5]++;cov_1rqe9b2qdi().s[20]++;this.responseData=data;}});// Call the deleteUser function
cov_1rqe9b2qdi().s[21]++;await deleteUser(req,res);// Check the response status code
cov_1rqe9b2qdi().s[22]++;expect(res.statusCode).to.equal(201);cov_1rqe9b2qdi().s[23]++;expect(res.responseData.message).to.equal('User deleted successfully!');});cov_1rqe9b2qdi().s[24]++;it('should handle deletion of a non-existent user without errors',async function(){cov_1rqe9b2qdi().f[6]++;const nonExistentUserId=(cov_1rqe9b2qdi().s[25]++,'1111');// Replace with a non-existent user ID for your test
// Mock the request and response objects
const req=(cov_1rqe9b2qdi().s[26]++,{params:{id:nonExistentUserId}});const res=(cov_1rqe9b2qdi().s[27]++,{status:function(code){cov_1rqe9b2qdi().f[7]++;cov_1rqe9b2qdi().s[28]++;this.statusCode=code;cov_1rqe9b2qdi().s[29]++;return this;},json:function(data){cov_1rqe9b2qdi().f[8]++;cov_1rqe9b2qdi().s[30]++;this.responseData=data;}});// Call the deleteUser function
cov_1rqe9b2qdi().s[31]++;await deleteUser(req,res);// Check the response status code
cov_1rqe9b2qdi().s[32]++;expect(res.statusCode,404);// Check the response message
cov_1rqe9b2qdi().s[33]++;expect(res.responseData.message,'User not found!');});cov_1rqe9b2qdi().s[34]++;it('should handle deletion of a non-existent user and leave JSON unchanged',async function(){cov_1rqe9b2qdi().f[9]++;const nonExistentUserId=(cov_1rqe9b2qdi().s[35]++,'nonexistent');// Replace with a non-existent user ID for your test
// Read the content of users.json before the deletion
const usersBeforeDeletion=(cov_1rqe9b2qdi().s[36]++,await readJSON('utils/users.json'));// Mock the request and response objects
const req=(cov_1rqe9b2qdi().s[37]++,{params:{id:nonExistentUserId}});const res=(cov_1rqe9b2qdi().s[38]++,{status:function(code){cov_1rqe9b2qdi().f[10]++;cov_1rqe9b2qdi().s[39]++;this.statusCode=code;cov_1rqe9b2qdi().s[40]++;return this;},json:function(data){cov_1rqe9b2qdi().f[11]++;cov_1rqe9b2qdi().s[41]++;this.responseData=data;}});// Call the deleteUser function
cov_1rqe9b2qdi().s[42]++;await deleteUser(req,res);// Check the response status code
cov_1rqe9b2qdi().s[43]++;expect(res.statusCode).to.equal(404);// Check the response message
cov_1rqe9b2qdi().s[44]++;expect(res.responseData.message).to.equal('User not found!');const usersAfterDeletion=(cov_1rqe9b2qdi().s[45]++,await readJSON('utils/users.json'));// Compare the contents before and after deletion
cov_1rqe9b2qdi().s[46]++;expect(usersAfterDeletion).to.deep.equal(usersBeforeDeletion);});cov_1rqe9b2qdi().s[47]++;it('should deny the user of deleting a user if the user being deleted is the only user at level 2',async function(){cov_1rqe9b2qdi().f[12]++;const testUserId=(cov_1rqe9b2qdi().s[48]++,'316');// Replace with an actual user ID for your test
// Mock the request and response objects
const req=(cov_1rqe9b2qdi().s[49]++,{params:{id:testUserId}});const res=(cov_1rqe9b2qdi().s[50]++,{status:function(code){cov_1rqe9b2qdi().f[13]++;cov_1rqe9b2qdi().s[51]++;this.statusCode=code;cov_1rqe9b2qdi().s[52]++;return this;},json:function(data){cov_1rqe9b2qdi().f[14]++;cov_1rqe9b2qdi().s[53]++;this.responseData=data;}});// Call the deleteUser function
cov_1rqe9b2qdi().s[54]++;await deleteUser(req,res);// Check the response status code
cov_1rqe9b2qdi().s[55]++;expect(res.statusCode).to.equal(400);cov_1rqe9b2qdi().s[56]++;expect(res.responseData.message).to.equal('Cannot delete the last user with level 2!');});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,