function cov_1vs3c6j1ll(){var path="C:\\Users\\eacsa\\Documents\\DVOPS_Projects\\DVOPS-part1\\tests\\timeIn.test.js";var hash="b67c21b7c6d6a5879549fa250eb42ace695b0304";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\eacsa\\Documents\\DVOPS_Projects\\DVOPS-part1\\tests\\timeIn.test.js",statementMap:{"0":{start:{line:1,column:11},end:{line:1,column:33}},"1":{start:{line:2,column:37},end:{line:2,column:65}},"2":{start:{line:3,column:19},end:{line:3,column:34}},"3":{start:{line:5,column:0},end:{line:210,column:7}},"4":{start:{line:7,column:30},end:{line:7,column:53}},"5":{start:{line:9,column:4},end:{line:13,column:7}},"6":{start:{line:11,column:24},end:{line:11,column:69}},"7":{start:{line:12,column:6},end:{line:12,column:63}},"8":{start:{line:15,column:4},end:{line:21,column:7}},"9":{start:{line:17,column:28},end:{line:17,column:72}},"10":{start:{line:18,column:6},end:{line:18,column:68}},"11":{start:{line:20,column:6},end:{line:20,column:41}},"12":{start:{line:23,column:4},end:{line:58,column:9}},"13":{start:{line:24,column:27},end:{line:24,column:32}},"14":{start:{line:27,column:20},end:{line:29,column:9}},"15":{start:{line:30,column:20},end:{line:38,column:9}},"16":{start:{line:32,column:12},end:{line:32,column:35}},"17":{start:{line:33,column:12},end:{line:33,column:24}},"18":{start:{line:36,column:12},end:{line:36,column:37}},"19":{start:{line:41,column:34},end:{line:41,column:68}},"20":{start:{line:44,column:8},end:{line:44,column:39}},"21":{start:{line:47,column:8},end:{line:47,column:45}},"22":{start:{line:48,column:8},end:{line:48,column:85}},"23":{start:{line:51,column:33},end:{line:51,column:67}},"24":{start:{line:54,column:32},end:{line:54,column:85}},"25":{start:{line:54,column:62},end:{line:54,column:84}},"26":{start:{line:57,column:8},end:{line:57,column:49}},"27":{start:{line:59,column:6},end:{line:103,column:9}},"28":{start:{line:60,column:27},end:{line:60,column:32}},"29":{start:{line:63,column:31},end:{line:65,column:9}},"30":{start:{line:66,column:31},end:{line:74,column:9}},"31":{start:{line:68,column:12},end:{line:68,column:35}},"32":{start:{line:69,column:12},end:{line:69,column:24}},"33":{start:{line:72,column:12},end:{line:72,column:37}},"34":{start:{line:77,column:32},end:{line:79,column:9}},"35":{start:{line:80,column:32},end:{line:88,column:9}},"36":{start:{line:82,column:12},end:{line:82,column:35}},"37":{start:{line:83,column:12},end:{line:83,column:24}},"38":{start:{line:86,column:12},end:{line:86,column:37}},"39":{start:{line:91,column:8},end:{line:91,column:61}},"40":{start:{line:94,column:8},end:{line:94,column:56}},"41":{start:{line:95,column:8},end:{line:95,column:96}},"42":{start:{line:98,column:8},end:{line:98,column:63}},"43":{start:{line:101,column:8},end:{line:101,column:57}},"44":{start:{line:102,column:8},end:{line:102,column:88}},"45":{start:{line:105,column:6},end:{line:140,column:9}},"46":{start:{line:106,column:27},end:{line:106,column:32}},"47":{start:{line:109,column:20},end:{line:111,column:9}},"48":{start:{line:112,column:20},end:{line:120,column:9}},"49":{start:{line:114,column:12},end:{line:114,column:35}},"50":{start:{line:115,column:12},end:{line:115,column:24}},"51":{start:{line:118,column:12},end:{line:118,column:37}},"52":{start:{line:123,column:40},end:{line:123,column:71}},"53":{start:{line:126,column:8},end:{line:126,column:39}},"54":{start:{line:129,column:8},end:{line:129,column:45}},"55":{start:{line:130,column:8},end:{line:130,column:85}},"56":{start:{line:133,column:33},end:{line:133,column:67}},"57":{start:{line:136,column:32},end:{line:136,column:85}},"58":{start:{line:136,column:62},end:{line:136,column:84}},"59":{start:{line:139,column:8},end:{line:139,column:74}},"60":{start:{line:142,column:6},end:{line:182,column:9}},"61":{start:{line:143,column:27},end:{line:143,column:30}},"62":{start:{line:146,column:20},end:{line:148,column:9}},"63":{start:{line:149,column:20},end:{line:157,column:9}},"64":{start:{line:151,column:12},end:{line:151,column:35}},"65":{start:{line:152,column:12},end:{line:152,column:24}},"66":{start:{line:155,column:12},end:{line:155,column:37}},"67":{start:{line:160,column:8},end:{line:160,column:39}},"68":{start:{line:163,column:8},end:{line:163,column:45}},"69":{start:{line:164,column:8},end:{line:164,column:85}},"70":{start:{line:167,column:33},end:{line:167,column:67}},"71":{start:{line:170,column:32},end:{line:170,column:85}},"72":{start:{line:170,column:62},end:{line:170,column:84}},"73":{start:{line:173,column:8},end:{line:173,column:49}},"74":{start:{line:176,column:29},end:{line:176,column:63}},"75":{start:{line:177,column:22},end:{line:177,column:51}},"76":{start:{line:178,column:24},end:{line:178,column:53}},"77":{start:{line:180,column:8},end:{line:180,column:56}},"78":{start:{line:181,column:8},end:{line:181,column:58}},"79":{start:{line:185,column:6},end:{line:208,column:9}},"80":{start:{line:186,column:30},end:{line:186,column:38}},"81":{start:{line:189,column:20},end:{line:191,column:9}},"82":{start:{line:192,column:20},end:{line:200,column:9}},"83":{start:{line:194,column:12},end:{line:194,column:35}},"84":{start:{line:195,column:12},end:{line:195,column:24}},"85":{start:{line:198,column:12},end:{line:198,column:37}},"86":{start:{line:203,column:8},end:{line:203,column:39}},"87":{start:{line:206,column:8},end:{line:206,column:45}},"88":{start:{line:207,column:8},end:{line:207,column:69}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:37},end:{line:5,column:38}},loc:{start:{line:5,column:49},end:{line:210,column:5}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:9,column:11},end:{line:9,column:12}},loc:{start:{line:9,column:29},end:{line:13,column:5}},line:9},"2":{name:"(anonymous_2)",decl:{start:{line:15,column:10},end:{line:15,column:11}},loc:{start:{line:15,column:28},end:{line:21,column:5}},line:15},"3":{name:"(anonymous_3)",decl:{start:{line:23,column:62},end:{line:23,column:63}},loc:{start:{line:23,column:80},end:{line:58,column:7}},line:23},"4":{name:"(anonymous_4)",decl:{start:{line:31,column:18},end:{line:31,column:19}},loc:{start:{line:31,column:34},end:{line:34,column:11}},line:31},"5":{name:"(anonymous_5)",decl:{start:{line:35,column:16},end:{line:35,column:17}},loc:{start:{line:35,column:32},end:{line:37,column:11}},line:35},"6":{name:"(anonymous_6)",decl:{start:{line:54,column:54},end:{line:54,column:55}},loc:{start:{line:54,column:62},end:{line:54,column:84}},line:54},"7":{name:"(anonymous_7)",decl:{start:{line:59,column:56},end:{line:59,column:57}},loc:{start:{line:59,column:74},end:{line:103,column:7}},line:59},"8":{name:"(anonymous_8)",decl:{start:{line:67,column:18},end:{line:67,column:19}},loc:{start:{line:67,column:34},end:{line:70,column:11}},line:67},"9":{name:"(anonymous_9)",decl:{start:{line:71,column:16},end:{line:71,column:17}},loc:{start:{line:71,column:32},end:{line:73,column:11}},line:71},"10":{name:"(anonymous_10)",decl:{start:{line:81,column:18},end:{line:81,column:19}},loc:{start:{line:81,column:34},end:{line:84,column:11}},line:81},"11":{name:"(anonymous_11)",decl:{start:{line:85,column:16},end:{line:85,column:17}},loc:{start:{line:85,column:32},end:{line:87,column:11}},line:85},"12":{name:"(anonymous_12)",decl:{start:{line:105,column:62},end:{line:105,column:63}},loc:{start:{line:105,column:80},end:{line:140,column:7}},line:105},"13":{name:"(anonymous_13)",decl:{start:{line:113,column:18},end:{line:113,column:19}},loc:{start:{line:113,column:34},end:{line:116,column:11}},line:113},"14":{name:"(anonymous_14)",decl:{start:{line:117,column:16},end:{line:117,column:17}},loc:{start:{line:117,column:32},end:{line:119,column:11}},line:117},"15":{name:"(anonymous_15)",decl:{start:{line:136,column:54},end:{line:136,column:55}},loc:{start:{line:136,column:62},end:{line:136,column:84}},line:136},"16":{name:"(anonymous_16)",decl:{start:{line:142,column:75},end:{line:142,column:76}},loc:{start:{line:142,column:93},end:{line:182,column:7}},line:142},"17":{name:"(anonymous_17)",decl:{start:{line:150,column:18},end:{line:150,column:19}},loc:{start:{line:150,column:34},end:{line:153,column:11}},line:150},"18":{name:"(anonymous_18)",decl:{start:{line:154,column:16},end:{line:154,column:17}},loc:{start:{line:154,column:32},end:{line:156,column:11}},line:154},"19":{name:"(anonymous_19)",decl:{start:{line:170,column:54},end:{line:170,column:55}},loc:{start:{line:170,column:62},end:{line:170,column:84}},line:170},"20":{name:"(anonymous_20)",decl:{start:{line:185,column:64},end:{line:185,column:65}},loc:{start:{line:185,column:82},end:{line:208,column:7}},line:185},"21":{name:"(anonymous_21)",decl:{start:{line:193,column:18},end:{line:193,column:19}},loc:{start:{line:193,column:34},end:{line:196,column:11}},line:193},"22":{name:"(anonymous_22)",decl:{start:{line:197,column:16},end:{line:197,column:17}},loc:{start:{line:197,column:32},end:{line:199,column:11}},line:197}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b67c21b7c6d6a5879549fa250eb42ace695b0304"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1vs3c6j1ll=function(){return actualCoverage;};}return actualCoverage;}cov_1vs3c6j1ll();const fs=(cov_1vs3c6j1ll().s[0]++,require('fs').promises);const{updateUserTime,readJSON}=(cov_1vs3c6j1ll().s[1]++,require('../utils/UserUtil'));// Adjust the path as needed
const{expect}=(cov_1vs3c6j1ll().s[2]++,require('chai'));cov_1vs3c6j1ll().s[3]++;describe('Testing Time in function',function(){cov_1vs3c6j1ll().f[0]++;// Create a temporary copy of the users.json file for testing
const testUsersFilePath=(cov_1vs3c6j1ll().s[4]++,'utils/test-users.json');cov_1vs3c6j1ll().s[5]++;before(async function(){cov_1vs3c6j1ll().f[1]++;// Copy the contents of users.json to test-users.json for testing
const usersData=(cov_1vs3c6j1ll().s[6]++,await fs.readFile('utils/users.json','utf8'));cov_1vs3c6j1ll().s[7]++;await fs.writeFile(testUsersFilePath,usersData,'utf8');});cov_1vs3c6j1ll().s[8]++;after(async function(){cov_1vs3c6j1ll().f[2]++;// Clean up: restore the original users.json file
const testUsersData=(cov_1vs3c6j1ll().s[9]++,await fs.readFile(testUsersFilePath,'utf8'));cov_1vs3c6j1ll().s[10]++;await fs.writeFile('utils/users.json',testUsersData,'utf8');// Delete the temporary test-users.json file
cov_1vs3c6j1ll().s[11]++;await fs.unlink(testUsersFilePath);});cov_1vs3c6j1ll().s[12]++;it('should successfully update the user time on time in',async function(){cov_1vs3c6j1ll().f[3]++;const testUserId=(cov_1vs3c6j1ll().s[13]++,'312');// Replace with an actual user ID for your test
// Mock the request and response objects
const req=(cov_1vs3c6j1ll().s[14]++,{params:{id:testUserId}});const res=(cov_1vs3c6j1ll().s[15]++,{status:function(code){cov_1vs3c6j1ll().f[4]++;cov_1vs3c6j1ll().s[16]++;this.statusCode=code;cov_1vs3c6j1ll().s[17]++;return this;},json:function(data){cov_1vs3c6j1ll().f[5]++;cov_1vs3c6j1ll().s[18]++;this.responseData=data;}});// Read the content of users.json before the time in operation
const usersBeforeTimeIn=(cov_1vs3c6j1ll().s[19]++,await readJSON('utils/users.json'));// Call the updateUserTime function
cov_1vs3c6j1ll().s[20]++;await updateUserTime(req,res);// Check the response status code and message
cov_1vs3c6j1ll().s[21]++;expect(res.statusCode).to.equal(200);cov_1vs3c6j1ll().s[22]++;expect(res.responseData.message).to.equal('User time updated successfully!');// Read the content of users.json after the time in operation
const usersAfterTimeIn=(cov_1vs3c6j1ll().s[23]++,await readJSON('utils/users.json'));// Find the user in the updated data
const userAfterTimeIn=(cov_1vs3c6j1ll().s[24]++,usersAfterTimeIn.find(user=>{cov_1vs3c6j1ll().f[6]++;cov_1vs3c6j1ll().s[25]++;return user.id===testUserId;}));// Check that the user's time_in property has been updated
cov_1vs3c6j1ll().s[26]++;expect(userAfterTimeIn.time_in).to.exist;});cov_1vs3c6j1ll().s[27]++;it('should handle duplicate "time in" operation',async function(){cov_1vs3c6j1ll().f[7]++;const testUserId=(cov_1vs3c6j1ll().s[28]++,'313');// Replace with an actual user ID for your test
// Mock the request and response objects for the first time in operation
const firstTimeInReq=(cov_1vs3c6j1ll().s[29]++,{params:{id:testUserId}});const firstTimeInRes=(cov_1vs3c6j1ll().s[30]++,{status:function(code){cov_1vs3c6j1ll().f[8]++;cov_1vs3c6j1ll().s[31]++;this.statusCode=code;cov_1vs3c6j1ll().s[32]++;return this;},json:function(data){cov_1vs3c6j1ll().f[9]++;cov_1vs3c6j1ll().s[33]++;this.responseData=data;}});// Mock the request and response objects for the second time in operation
const secondTimeInReq=(cov_1vs3c6j1ll().s[34]++,{params:{id:testUserId}});const secondTimeInRes=(cov_1vs3c6j1ll().s[35]++,{status:function(code){cov_1vs3c6j1ll().f[10]++;cov_1vs3c6j1ll().s[36]++;this.statusCode=code;cov_1vs3c6j1ll().s[37]++;return this;},json:function(data){cov_1vs3c6j1ll().f[11]++;cov_1vs3c6j1ll().s[38]++;this.responseData=data;}});// Call the updateUserTime function for the first time in operation
cov_1vs3c6j1ll().s[39]++;await updateUserTime(firstTimeInReq,firstTimeInRes);// Check the response status code and message for the first time in operation
cov_1vs3c6j1ll().s[40]++;expect(firstTimeInRes.statusCode).to.equal(200);cov_1vs3c6j1ll().s[41]++;expect(firstTimeInRes.responseData.message).to.equal('User time updated successfully!');// Call the updateUserTime function for the second time in operation
cov_1vs3c6j1ll().s[42]++;await updateUserTime(secondTimeInReq,secondTimeInRes);// Check the response status code and message for the second time in operation
cov_1vs3c6j1ll().s[43]++;expect(secondTimeInRes.statusCode).to.equal(400);cov_1vs3c6j1ll().s[44]++;expect(secondTimeInRes.responseData.message).to.equal('User already timed in!');});cov_1vs3c6j1ll().s[45]++;it('should record the correct time when user times in',async function(){cov_1vs3c6j1ll().f[12]++;const testUserId=(cov_1vs3c6j1ll().s[46]++,'314');// Replace with an actual user ID for your test
// Mock the request and response objects
const req=(cov_1vs3c6j1ll().s[47]++,{params:{id:testUserId}});const res=(cov_1vs3c6j1ll().s[48]++,{status:function(code){cov_1vs3c6j1ll().f[13]++;cov_1vs3c6j1ll().s[49]++;this.statusCode=code;cov_1vs3c6j1ll().s[50]++;return this;},json:function(data){cov_1vs3c6j1ll().f[14]++;cov_1vs3c6j1ll().s[51]++;this.responseData=data;}});// Record the current time before the time in operation
const currentTimeBeforeTimeIn=(cov_1vs3c6j1ll().s[52]++,new Date().toLocaleTimeString());// Call the updateUserTime function
cov_1vs3c6j1ll().s[53]++;await updateUserTime(req,res);// Check the response status code and message
cov_1vs3c6j1ll().s[54]++;expect(res.statusCode).to.equal(200);cov_1vs3c6j1ll().s[55]++;expect(res.responseData.message).to.equal('User time updated successfully!');// Read the content of users.json after the time in operation
const usersAfterTimeIn=(cov_1vs3c6j1ll().s[56]++,await readJSON('utils/users.json'));// Find the user in the updated data
const userAfterTimeIn=(cov_1vs3c6j1ll().s[57]++,usersAfterTimeIn.find(user=>{cov_1vs3c6j1ll().f[15]++;cov_1vs3c6j1ll().s[58]++;return user.id===testUserId;}));// Check that the user's time_in property matches the current time before the time in operation
cov_1vs3c6j1ll().s[59]++;expect(userAfterTimeIn.time_in).to.equal(currentTimeBeforeTimeIn);});cov_1vs3c6j1ll().s[60]++;it('should record time within normal time clock range on "time in"',async function(){cov_1vs3c6j1ll().f[16]++;const testUserId=(cov_1vs3c6j1ll().s[61]++,'2');// Replace with an actual user ID for your test
// Mock the request and response objects
const req=(cov_1vs3c6j1ll().s[62]++,{params:{id:testUserId}});const res=(cov_1vs3c6j1ll().s[63]++,{status:function(code){cov_1vs3c6j1ll().f[17]++;cov_1vs3c6j1ll().s[64]++;this.statusCode=code;cov_1vs3c6j1ll().s[65]++;return this;},json:function(data){cov_1vs3c6j1ll().f[18]++;cov_1vs3c6j1ll().s[66]++;this.responseData=data;}});// Call the updateUserTime function
cov_1vs3c6j1ll().s[67]++;await updateUserTime(req,res);// Check the response status code and message
cov_1vs3c6j1ll().s[68]++;expect(res.statusCode).to.equal(200);cov_1vs3c6j1ll().s[69]++;expect(res.responseData.message).to.equal('User time updated successfully!');// Read the content of users.json after the time in operation
const usersAfterTimeIn=(cov_1vs3c6j1ll().s[70]++,await readJSON('utils/users.json'));// Find the user in the updated data
const userAfterTimeIn=(cov_1vs3c6j1ll().s[71]++,usersAfterTimeIn.find(user=>{cov_1vs3c6j1ll().f[19]++;cov_1vs3c6j1ll().s[72]++;return user.id===testUserId;}));// Check that the user's time_in property exists
cov_1vs3c6j1ll().s[73]++;expect(userAfterTimeIn.time_in).to.exist;// Validate that the recorded time is within the normal time clock range (e.g., between 00:00 and 23:59)
const recordedTime=(cov_1vs3c6j1ll().s[74]++,userAfterTimeIn.time_in.split(':'));const hours=(cov_1vs3c6j1ll().s[75]++,parseInt(recordedTime[0],10));const minutes=(cov_1vs3c6j1ll().s[76]++,parseInt(recordedTime[1],10));cov_1vs3c6j1ll().s[77]++;expect(hours).to.be.at.least(0).and.at.most(23);cov_1vs3c6j1ll().s[78]++;expect(minutes).to.be.at.least(0).and.at.most(59);});cov_1vs3c6j1ll().s[79]++;it('should handle updating time for a non-existent user',async function(){cov_1vs3c6j1ll().f[20]++;const invalidUserId=(cov_1vs3c6j1ll().s[80]++,'253235');// Replace with a non-existent user ID
// Mock the request and response objects
const req=(cov_1vs3c6j1ll().s[81]++,{params:{id:invalidUserId}});const res=(cov_1vs3c6j1ll().s[82]++,{status:function(code){cov_1vs3c6j1ll().f[21]++;cov_1vs3c6j1ll().s[83]++;this.statusCode=code;cov_1vs3c6j1ll().s[84]++;return this;},json:function(data){cov_1vs3c6j1ll().f[22]++;cov_1vs3c6j1ll().s[85]++;this.responseData=data;}});// Call the updateUserTime function for a non-existent user
cov_1vs3c6j1ll().s[86]++;await updateUserTime(req,res);// Check the response status code and message
cov_1vs3c6j1ll().s[87]++;expect(res.statusCode).to.equal(404);cov_1vs3c6j1ll().s[88]++;expect(res.responseData.message).to.equal('User not found!');});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,